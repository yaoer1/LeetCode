class Solution {
public:
    vector<vector<string>> partition(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int size = s.length();
        res.clear();
        if(size == 0) return res;
        vector<vector<bool>> dp(size,vector<bool>(size,false));
        for(int i = 0; i < size; i++) dp[i][i]=true;
        for(int i = 0; i < size - 1; i++) dp[i][i+1] = (s[i] == s[i+1]);
        for(int pace = 2; pace < size; pace++)
            for(int i = 0; i + pace < size; i++)
                dp[i][i+pace] = ((s[i]==s[i+pace]) ? dp[i+1][i+pace-1] : false);
        partition(s,size,dp,string(),0,vector<string>());
        return res;
    }
    void partition(string &s, int &size, vector<vector<bool>> &dp, string str, int start, vector<string> svec){
        if(str.length() != 0 ) svec.push_back(str);
        if(start == size){
            res.push_back(svec);
            return ;
        }
        for(int i = start; i < size; i++)
            if(dp[start][i]) partition(s,size,dp,s.substr(start,i-start+1), i+1, svec);
    }
    
    vector<vector<string>> res;
};
