class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function]
        
        if((m + n) & 0x1)
            return findMedianSortedArrays(A,m,0,B,n,0,1+((m+n)>>1));
        else 
            return (findMedianSortedArrays(A,m,0,B,n,0,(m+n)>>1) + findMedianSortedArrays(A,m,0,B,n,0,1+((m+n)>>1))) / 2;

    }
   
    double findMedianSortedArrays(int A[], int m, int begA, int B[], int n, int begB, int k)
    {
        if(k==1){
            if(begA==m) return B[begB];
            else if(begB==n) return A[begA];
            return min(A[begA],B[begB]);
        }
        int mid = k >> 1;
        if(begA + mid - 1 < m && begB + mid - 1 < n){
            if(A[begA+mid-1] < B[begB+mid-1])
                return findMedianSortedArrays(A,m,begA+mid,B,n,begB,k-mid);
            else if(A[begA+mid-1] > B[begB+mid-1])
                return findMedianSortedArrays(A,m,begA,B,n,begB+mid,k-mid);
            else if(A[begA+mid-1] == B[begB+mid-1])
                return (k & 0x1) ? min(A[begA+mid],B[begB+mid]) : A[begA+mid-1];
        }
        else if(begA + mid - 1 >= m){
            if(m-1<0 || A[m-1] < B[begB+mid-1])
                return B[begB+k-(m-begA)-1];
            return findMedianSortedArrays(A,m,begA,B,n,begB+mid,k - mid);    
        }
        else if(begB + mid - 1 >= n){
            if(n - 1 < 0 || A[begA+mid-1] > B[n-1])
                return A[begA+k-(n-begB)-1];
            return findMedianSortedArrays(A,m,begA+mid,B,n,begB,k-mid);
        }
    }
};
